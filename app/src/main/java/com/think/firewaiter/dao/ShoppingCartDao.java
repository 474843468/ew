package com.think.firewaiter.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.think.firewaiter.module.PxFormatInfo;
import com.think.firewaiter.module.PxMethodInfo;
import com.think.firewaiter.module.PxProductInfo;
import com.think.firewaiter.module.PxTableInfo;
import com.think.firewaiter.module.User;

import com.think.firewaiter.module.ShoppingCart;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ShoppingCart".
*/
public class ShoppingCartDao extends AbstractDao<ShoppingCart, Long> {

    public static final String TABLENAME = "ShoppingCart";

    /**
     * Properties of entity ShoppingCart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Num = new Property(1, Double.class, "num", false, "NUM");
        public final static Property MultipleUnitNum = new Property(2, Double.class, "multipleUnitNum", false, "MULTIPLE_UNIT_NUM");
        public final static Property IsDelay = new Property(3, Boolean.class, "isDelay", false, "IS_DELAY");
        public final static Property Remarks = new Property(4, String.class, "remarks", false, "REMARKS");
        public final static Property UserId = new Property(5, Long.class, "userId", false, "USER_ID");
        public final static Property TableId = new Property(6, Long.class, "tableId", false, "TABLE_ID");
        public final static Property ProdId = new Property(7, Long.class, "prodId", false, "PROD_ID");
        public final static Property FormatId = new Property(8, Long.class, "formatId", false, "FORMAT_ID");
        public final static Property MethodId = new Property(9, Long.class, "methodId", false, "METHOD_ID");
    };

    private DaoSession daoSession;


    public ShoppingCartDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingCartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ShoppingCart\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"NUM\" REAL," + // 1: num
                "\"MULTIPLE_UNIT_NUM\" REAL," + // 2: multipleUnitNum
                "\"IS_DELAY\" INTEGER," + // 3: isDelay
                "\"REMARKS\" TEXT," + // 4: remarks
                "\"USER_ID\" INTEGER," + // 5: userId
                "\"TABLE_ID\" INTEGER," + // 6: tableId
                "\"PROD_ID\" INTEGER," + // 7: prodId
                "\"FORMAT_ID\" INTEGER," + // 8: formatId
                "\"METHOD_ID\" INTEGER);"); // 9: methodId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ShoppingCart\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShoppingCart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double num = entity.getNum();
        if (num != null) {
            stmt.bindDouble(2, num);
        }
 
        Double multipleUnitNum = entity.getMultipleUnitNum();
        if (multipleUnitNum != null) {
            stmt.bindDouble(3, multipleUnitNum);
        }
 
        Boolean isDelay = entity.getIsDelay();
        if (isDelay != null) {
            stmt.bindLong(4, isDelay ? 1L: 0L);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(6, userId);
        }
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(7, tableId);
        }
 
        Long prodId = entity.getProdId();
        if (prodId != null) {
            stmt.bindLong(8, prodId);
        }
 
        Long formatId = entity.getFormatId();
        if (formatId != null) {
            stmt.bindLong(9, formatId);
        }
 
        Long methodId = entity.getMethodId();
        if (methodId != null) {
            stmt.bindLong(10, methodId);
        }
    }

    @Override
    protected void attachEntity(ShoppingCart entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShoppingCart readEntity(Cursor cursor, int offset) {
        ShoppingCart entity = new ShoppingCart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // num
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // multipleUnitNum
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isDelay
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remarks
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // tableId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // prodId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // formatId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // methodId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShoppingCart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNum(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setMultipleUnitNum(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setIsDelay(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRemarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTableId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setProdId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFormatId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setMethodId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShoppingCart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShoppingCart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxTableInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPxProductInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPxFormatInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPxMethodInfoDao().getAllColumns());
            builder.append(" FROM ShoppingCart T");
            builder.append(" LEFT JOIN User T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TableInfo T1 ON T.\"TABLE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN ProductInfo T2 ON T.\"PROD_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN FormatInfo T3 ON T.\"FORMAT_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN MethodInfo T4 ON T.\"METHOD_ID\"=T4.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ShoppingCart loadCurrentDeep(Cursor cursor, boolean lock) {
        ShoppingCart entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User dbUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setDbUser(dbUser);
        offset += daoSession.getUserDao().getAllColumns().length;

        PxTableInfo dbTable = loadCurrentOther(daoSession.getPxTableInfoDao(), cursor, offset);
        entity.setDbTable(dbTable);
        offset += daoSession.getPxTableInfoDao().getAllColumns().length;

        PxProductInfo dbProd = loadCurrentOther(daoSession.getPxProductInfoDao(), cursor, offset);
        entity.setDbProd(dbProd);
        offset += daoSession.getPxProductInfoDao().getAllColumns().length;

        PxFormatInfo dbFormat = loadCurrentOther(daoSession.getPxFormatInfoDao(), cursor, offset);
        entity.setDbFormat(dbFormat);
        offset += daoSession.getPxFormatInfoDao().getAllColumns().length;

        PxMethodInfo dbMethod = loadCurrentOther(daoSession.getPxMethodInfoDao(), cursor, offset);
        entity.setDbMethod(dbMethod);

        return entity;    
    }

    public ShoppingCart loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ShoppingCart> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ShoppingCart> list = new ArrayList<ShoppingCart>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ShoppingCart> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ShoppingCart> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

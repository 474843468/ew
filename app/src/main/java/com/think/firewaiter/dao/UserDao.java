package com.think.firewaiter.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.think.firewaiter.module.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property LoginName = new Property(2, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property No = new Property(4, String.class, "no", false, "NO");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Mobile = new Property(8, String.class, "mobile", false, "MOBILE");
        public final static Property UserType = new Property(9, String.class, "userType", false, "USER_TYPE");
        public final static Property LoginIp = new Property(10, String.class, "loginIp", false, "LOGIN_IP");
        public final static Property LoginDate = new Property(11, java.util.Date.class, "loginDate", false, "LOGIN_DATE");
        public final static Property LoginFlag = new Property(12, String.class, "loginFlag", false, "LOGIN_FLAG");
        public final static Property Photo = new Property(13, String.class, "photo", false, "PHOTO");
        public final static Property OldLoginName = new Property(14, String.class, "oldLoginName", false, "OLD_LOGIN_NAME");
        public final static Property NewPassword = new Property(15, String.class, "newPassword", false, "NEW_PASSWORD");
        public final static Property OldLoginIp = new Property(16, String.class, "oldLoginIp", false, "OLD_LOGIN_IP");
        public final static Property OldLoginDate = new Property(17, java.util.Date.class, "oldLoginDate", false, "OLD_LOGIN_DATE");
        public final static Property DelFlag = new Property(18, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property MaxTail = new Property(19, Double.class, "maxTail", false, "MAX_TAIL");
        public final static Property CompanyCode = new Property(20, String.class, "companyCode", false, "COMPANY_CODE");
        public final static Property ImUserName = new Property(21, String.class, "imUserName", false, "IM_USER_NAME");
        public final static Property InitPassword = new Property(22, String.class, "initPassword", false, "INIT_PASSWORD");
        public final static Property CanRetreat = new Property(23, String.class, "canRetreat", false, "CAN_RETREAT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"LOGIN_NAME\" TEXT," + // 2: loginName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"NO\" TEXT," + // 4: no
                "\"NAME\" TEXT," + // 5: name
                "\"EMAIL\" TEXT," + // 6: email
                "\"PHONE\" TEXT," + // 7: phone
                "\"MOBILE\" TEXT," + // 8: mobile
                "\"USER_TYPE\" TEXT," + // 9: userType
                "\"LOGIN_IP\" TEXT," + // 10: loginIp
                "\"LOGIN_DATE\" INTEGER," + // 11: loginDate
                "\"LOGIN_FLAG\" TEXT," + // 12: loginFlag
                "\"PHOTO\" TEXT," + // 13: photo
                "\"OLD_LOGIN_NAME\" TEXT," + // 14: oldLoginName
                "\"NEW_PASSWORD\" TEXT," + // 15: newPassword
                "\"OLD_LOGIN_IP\" TEXT," + // 16: oldLoginIp
                "\"OLD_LOGIN_DATE\" INTEGER," + // 17: oldLoginDate
                "\"DEL_FLAG\" TEXT," + // 18: delFlag
                "\"MAX_TAIL\" REAL," + // 19: maxTail
                "\"COMPANY_CODE\" TEXT," + // 20: companyCode
                "\"IM_USER_NAME\" TEXT," + // 21: imUserName
                "\"INIT_PASSWORD\" TEXT," + // 22: initPassword
                "\"CAN_RETREAT\" TEXT);"); // 23: canRetreat
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(3, loginName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String no = entity.getNo();
        if (no != null) {
            stmt.bindString(5, no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(10, userType);
        }
 
        String loginIp = entity.getLoginIp();
        if (loginIp != null) {
            stmt.bindString(11, loginIp);
        }
 
        java.util.Date loginDate = entity.getLoginDate();
        if (loginDate != null) {
            stmt.bindLong(12, loginDate.getTime());
        }
 
        String loginFlag = entity.getLoginFlag();
        if (loginFlag != null) {
            stmt.bindString(13, loginFlag);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(14, photo);
        }
 
        String oldLoginName = entity.getOldLoginName();
        if (oldLoginName != null) {
            stmt.bindString(15, oldLoginName);
        }
 
        String newPassword = entity.getNewPassword();
        if (newPassword != null) {
            stmt.bindString(16, newPassword);
        }
 
        String oldLoginIp = entity.getOldLoginIp();
        if (oldLoginIp != null) {
            stmt.bindString(17, oldLoginIp);
        }
 
        java.util.Date oldLoginDate = entity.getOldLoginDate();
        if (oldLoginDate != null) {
            stmt.bindLong(18, oldLoginDate.getTime());
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(19, delFlag);
        }
 
        Double maxTail = entity.getMaxTail();
        if (maxTail != null) {
            stmt.bindDouble(20, maxTail);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(21, companyCode);
        }
 
        String imUserName = entity.getImUserName();
        if (imUserName != null) {
            stmt.bindString(22, imUserName);
        }
 
        String initPassword = entity.getInitPassword();
        if (initPassword != null) {
            stmt.bindString(23, initPassword);
        }
 
        String canRetreat = entity.getCanRetreat();
        if (canRetreat != null) {
            stmt.bindString(24, canRetreat);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // loginIp
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // loginDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // loginFlag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // photo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // oldLoginName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // newPassword
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // oldLoginIp
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // oldLoginDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // delFlag
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // maxTail
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // companyCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // imUserName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // initPassword
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // canRetreat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLoginIp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLoginDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setLoginFlag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPhoto(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOldLoginName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNewPassword(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOldLoginIp(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOldLoginDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setDelFlag(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMaxTail(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setCompanyCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setImUserName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setInitPassword(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCanRetreat(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

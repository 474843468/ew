package com.think.firewaiter.module;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import com.think.firewaiter.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.think.firewaiter.dao.PxFormatInfoDao;
import com.think.firewaiter.dao.PxProductInfoDao;
import com.think.firewaiter.dao.PxPromotioDetailsDao;
import com.think.firewaiter.dao.PxPromotioInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PromotioDetails".
 */
public class PxPromotioDetails implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 促销价
     */
     @Expose
    private Double promotionalPrice;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    private long pxProductInfoId;
    private Long pxFormatId;
    private long pxPromotioInfoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxPromotioDetailsDao myDao;

    private PxProductInfo dbProduct;
    private Long dbProduct__resolvedKey;

    private PxFormatInfo dbFormat;
    private Long dbFormat__resolvedKey;

    private PxPromotioInfo dbPromotio;
    private Long dbPromotio__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    @Expose private PxProductInfo product;
    @Expose private PxPromotioInfo promotio;
    @Expose private PxFormatInfo format;
    // KEEP FIELDS END

    public PxPromotioDetails() {
    }

    public PxPromotioDetails(Long id) {
        this.id = id;
    }

    public PxPromotioDetails(Long id, String objectId, Double promotionalPrice, String delFlag, long pxProductInfoId, Long pxFormatId, long pxPromotioInfoId) {
        this.id = id;
        this.objectId = objectId;
        this.promotionalPrice = promotionalPrice;
        this.delFlag = delFlag;
        this.pxProductInfoId = pxProductInfoId;
        this.pxFormatId = pxFormatId;
        this.pxPromotioInfoId = pxPromotioInfoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxPromotioDetailsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Double getPromotionalPrice() {
        return promotionalPrice;
    }

    public void setPromotionalPrice(Double promotionalPrice) {
        this.promotionalPrice = promotionalPrice;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public long getPxProductInfoId() {
        return pxProductInfoId;
    }

    public void setPxProductInfoId(long pxProductInfoId) {
        this.pxProductInfoId = pxProductInfoId;
    }

    public Long getPxFormatId() {
        return pxFormatId;
    }

    public void setPxFormatId(Long pxFormatId) {
        this.pxFormatId = pxFormatId;
    }

    public long getPxPromotioInfoId() {
        return pxPromotioInfoId;
    }

    public void setPxPromotioInfoId(long pxPromotioInfoId) {
        this.pxPromotioInfoId = pxPromotioInfoId;
    }

    /** To-one relationship, resolved on first access. */
    public PxProductInfo getDbProduct() {
        long __key = this.pxProductInfoId;
        if (dbProduct__resolvedKey == null || !dbProduct__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
            PxProductInfo dbProductNew = targetDao.load(__key);
            synchronized (this) {
                dbProduct = dbProductNew;
            	dbProduct__resolvedKey = __key;
            }
        }
        return dbProduct;
    }

    public void setDbProduct(PxProductInfo dbProduct) {
        if (dbProduct == null) {
            throw new DaoException("To-one property 'pxProductInfoId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbProduct = dbProduct;
            pxProductInfoId = dbProduct.getId();
            dbProduct__resolvedKey = pxProductInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxFormatInfo getDbFormat() {
        Long __key = this.pxFormatId;
        if (dbFormat__resolvedKey == null || !dbFormat__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxFormatInfoDao targetDao = daoSession.getPxFormatInfoDao();
            PxFormatInfo dbFormatNew = targetDao.load(__key);
            synchronized (this) {
                dbFormat = dbFormatNew;
            	dbFormat__resolvedKey = __key;
            }
        }
        return dbFormat;
    }

    public void setDbFormat(PxFormatInfo dbFormat) {
        synchronized (this) {
            this.dbFormat = dbFormat;
            pxFormatId = dbFormat == null ? null : dbFormat.getId();
            dbFormat__resolvedKey = pxFormatId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxPromotioInfo getDbPromotio() {
        long __key = this.pxPromotioInfoId;
        if (dbPromotio__resolvedKey == null || !dbPromotio__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPromotioInfoDao targetDao = daoSession.getPxPromotioInfoDao();
            PxPromotioInfo dbPromotioNew = targetDao.load(__key);
            synchronized (this) {
                dbPromotio = dbPromotioNew;
            	dbPromotio__resolvedKey = __key;
            }
        }
        return dbPromotio;
    }

    public void setDbPromotio(PxPromotioInfo dbPromotio) {
        if (dbPromotio == null) {
            throw new DaoException("To-one property 'pxPromotioInfoId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbPromotio = dbPromotio;
            pxPromotioInfoId = dbPromotio.getId();
            dbPromotio__resolvedKey = pxPromotioInfoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public PxProductInfo getProduct() {
        return product;
    }

    public void setProduct(PxProductInfo product) {
        this.product = product;
    }

    public PxPromotioInfo getPromotio() {
        return promotio;
    }

    public void setPromotio(PxPromotioInfo promotio) {
        this.promotio = promotio;
    }

    public PxFormatInfo getFormat() {
        return format;
    }

    public void setFormat(PxFormatInfo format) {
        this.format = format;
    }
    // KEEP METHODS END

}

package com.think.firewaiter.module;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import java.util.List;
import com.think.firewaiter.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.think.firewaiter.dao.PxPromotioDetailsDao;
import com.think.firewaiter.dao.PxPromotioInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PromotioInfo".
 */
public class PxPromotioInfo implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 促销计划名
     */
     @Expose
    private String name;
    /**
     * 促销编码
     */
     @Expose
    private String code;
    /**
     * 促销计划类型（0：长期有效 1：指定时间 2：每周特定）
     */
     @Expose
    private String type;
    /**
     * 开始时间
     */
     @Expose
    private String startTime;
    /**
     * 结束时间
     */
     @Expose
    private String endTime;
    /**
     * 开始日期
     */
     @Expose
    private java.util.Date startDate;
    /**
     * 结束日期
     */
     @Expose
    private java.util.Date endDate;
    /**
     * 每周几有效
     */
     @Expose
    private String weekly;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxPromotioInfoDao myDao;

    private List<PxPromotioDetails> dbPromDetailsList;

    // KEEP FIELDS - put your custom fields here
    //促销计划类型（0：长期有效 1：指定时间 2：每周特定）
    public static final String TYPE_LONG_TIME = "0";
    public static final String TYPE_APPOINT_TIME = "1";
    public static final String TYPE_SPECIFIC_TIME = "2";
    // KEEP FIELDS END

    public PxPromotioInfo() {
    }

    public PxPromotioInfo(Long id) {
        this.id = id;
    }

    public PxPromotioInfo(Long id, String objectId, String name, String code, String type, String startTime, String endTime, java.util.Date startDate, java.util.Date endDate, String weekly, String delFlag) {
        this.id = id;
        this.objectId = objectId;
        this.name = name;
        this.code = code;
        this.type = type;
        this.startTime = startTime;
        this.endTime = endTime;
        this.startDate = startDate;
        this.endDate = endDate;
        this.weekly = weekly;
        this.delFlag = delFlag;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxPromotioInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getStartTime() {
        return startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public String getEndTime() {
        return endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public java.util.Date getStartDate() {
        return startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    public java.util.Date getEndDate() {
        return endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        this.endDate = endDate;
    }

    public String getWeekly() {
        return weekly;
    }

    public void setWeekly(String weekly) {
        this.weekly = weekly;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxPromotioDetails> getDbPromDetailsList() {
        if (dbPromDetailsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPromotioDetailsDao targetDao = daoSession.getPxPromotioDetailsDao();
            List<PxPromotioDetails> dbPromDetailsListNew = targetDao._queryPxPromotioInfo_DbPromDetailsList(id);
            synchronized (this) {
                if(dbPromDetailsList == null) {
                    dbPromDetailsList = dbPromDetailsListNew;
                }
            }
        }
        return dbPromDetailsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbPromDetailsList() {
        dbPromDetailsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

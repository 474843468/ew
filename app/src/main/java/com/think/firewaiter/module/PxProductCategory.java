package com.think.firewaiter.module;

import java.util.List;
import com.think.firewaiter.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.think.firewaiter.dao.PxProductCategoryDao;
import com.think.firewaiter.dao.PxProductInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END
/**
 * Entity mapped to table "ProductCategory".
 */
public class PxProductCategory implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 排序号
     */
     @Expose
    private Integer orderNo;
    /**
     * 类型编码
     */
     @Expose
    private String code;
    /**
     * 数据版本
     */
     @Expose
    private Integer version;
    /**
     * 分类名称
     */
     @Expose
    private String name;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    /**
     * 父节点id
     */
     @Expose
    private String parentId;
    /**
     * 是否为叶子节点 0：是 1：否
     */
     @Expose
    private String leaf;
    /**
     * 类型 0:普通分类 1：套餐分类
     */
     @Expose
    private String type;
    /**
     * 上架 (0:上架  1：下架)
     */
     @Expose
    private String shelf;
    /**
     * 是否在微信点餐页面显示 0：显示 1：不显示
     */
     @Expose
    private String visible;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxProductCategoryDao myDao;

    private List<PxProductInfo> dbProductInfoList;

    // KEEP FIELDS - put your custom fields here
    public static final String IS_LEAF = "0";
    public static final String IS_NOT_LEAF = "1";
    //0:普通分类 1：套餐分类
    public static final String TYPE_NORMAL = "0";
    public static final String TYPE_COMBO = "1";


    public static final String SHELF_PUT_AWAY = "0";//上架
    public static final String SHELF_SOLD_OUT = "1";//下架
    // KEEP FIELDS END

    public PxProductCategory() {
    }

    public PxProductCategory(Long id) {
        this.id = id;
    }

    public PxProductCategory(Long id, String objectId, Integer orderNo, String code, Integer version, String name, String delFlag, String parentId, String leaf, String type, String shelf, String visible) {
        this.id = id;
        this.objectId = objectId;
        this.orderNo = orderNo;
        this.code = code;
        this.version = version;
        this.name = name;
        this.delFlag = delFlag;
        this.parentId = parentId;
        this.leaf = leaf;
        this.type = type;
        this.shelf = shelf;
        this.visible = visible;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxProductCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Integer getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(Integer orderNo) {
        this.orderNo = orderNo;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public String getParentId() {
        return parentId;
    }

    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    public String getLeaf() {
        return leaf;
    }

    public void setLeaf(String leaf) {
        this.leaf = leaf;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getShelf() {
        return shelf;
    }

    public void setShelf(String shelf) {
        this.shelf = shelf;
    }

    public String getVisible() {
        return visible;
    }

    public void setVisible(String visible) {
        this.visible = visible;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxProductInfo> getDbProductInfoList() {
        if (dbProductInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
            List<PxProductInfo> dbProductInfoListNew = targetDao._queryPxProductCategory_DbProductInfoList(id);
            synchronized (this) {
                if(dbProductInfoList == null) {
                    dbProductInfoList = dbProductInfoListNew;
                }
            }
        }
        return dbProductInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbProductInfoList() {
        dbProductInfoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

package com.think.firewaiter.module;

import com.think.firewaiter.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.think.firewaiter.dao.PxFormatInfoDao;
import com.think.firewaiter.dao.PxMethodInfoDao;
import com.think.firewaiter.dao.PxProductInfoDao;
import com.think.firewaiter.dao.PxTableInfoDao;
import com.think.firewaiter.dao.ShoppingCartDao;
import com.think.firewaiter.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END
/**
 * Entity mapped to table "ShoppingCart".
 */
public class ShoppingCart implements java.io.Serializable {

    private Long id;
    /**
     * 数量
     */
     @Expose
    private Double num;
    /**
     * 多单位数量
     */
     @Expose
    private Double multipleUnitNum;
    /**
     * 是否延迟
     */
     @Expose
    private Boolean isDelay;
    /**
     * 备注
     */
     @Expose
    private String remarks;
    private Long userId;
    private Long tableId;
    private Long prodId;
    private Long formatId;
    private Long methodId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShoppingCartDao myDao;

    private User dbUser;
    private Long dbUser__resolvedKey;

    private PxTableInfo dbTable;
    private Long dbTable__resolvedKey;

    private PxProductInfo dbProd;
    private Long dbProd__resolvedKey;

    private PxFormatInfo dbFormat;
    private Long dbFormat__resolvedKey;

    private PxMethodInfo dbMethod;
    private Long dbMethod__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ShoppingCart() {
    }

    public ShoppingCart(Long id) {
        this.id = id;
    }

    public ShoppingCart(Long id, Double num, Double multipleUnitNum, Boolean isDelay, String remarks, Long userId, Long tableId, Long prodId, Long formatId, Long methodId) {
        this.id = id;
        this.num = num;
        this.multipleUnitNum = multipleUnitNum;
        this.isDelay = isDelay;
        this.remarks = remarks;
        this.userId = userId;
        this.tableId = tableId;
        this.prodId = prodId;
        this.formatId = formatId;
        this.methodId = methodId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShoppingCartDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getNum() {
        return num;
    }

    public void setNum(Double num) {
        this.num = num;
    }

    public Double getMultipleUnitNum() {
        return multipleUnitNum;
    }

    public void setMultipleUnitNum(Double multipleUnitNum) {
        this.multipleUnitNum = multipleUnitNum;
    }

    public Boolean getIsDelay() {
        return isDelay;
    }

    public void setIsDelay(Boolean isDelay) {
        this.isDelay = isDelay;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getTableId() {
        return tableId;
    }

    public void setTableId(Long tableId) {
        this.tableId = tableId;
    }

    public Long getProdId() {
        return prodId;
    }

    public void setProdId(Long prodId) {
        this.prodId = prodId;
    }

    public Long getFormatId() {
        return formatId;
    }

    public void setFormatId(Long formatId) {
        this.formatId = formatId;
    }

    public Long getMethodId() {
        return methodId;
    }

    public void setMethodId(Long methodId) {
        this.methodId = methodId;
    }

    /** To-one relationship, resolved on first access. */
    public User getDbUser() {
        Long __key = this.userId;
        if (dbUser__resolvedKey == null || !dbUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbUserNew = targetDao.load(__key);
            synchronized (this) {
                dbUser = dbUserNew;
            	dbUser__resolvedKey = __key;
            }
        }
        return dbUser;
    }

    public void setDbUser(User dbUser) {
        synchronized (this) {
            this.dbUser = dbUser;
            userId = dbUser == null ? null : dbUser.getId();
            dbUser__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxTableInfo getDbTable() {
        Long __key = this.tableId;
        if (dbTable__resolvedKey == null || !dbTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxTableInfoDao targetDao = daoSession.getPxTableInfoDao();
            PxTableInfo dbTableNew = targetDao.load(__key);
            synchronized (this) {
                dbTable = dbTableNew;
            	dbTable__resolvedKey = __key;
            }
        }
        return dbTable;
    }

    public void setDbTable(PxTableInfo dbTable) {
        synchronized (this) {
            this.dbTable = dbTable;
            tableId = dbTable == null ? null : dbTable.getId();
            dbTable__resolvedKey = tableId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxProductInfo getDbProd() {
        Long __key = this.prodId;
        if (dbProd__resolvedKey == null || !dbProd__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
            PxProductInfo dbProdNew = targetDao.load(__key);
            synchronized (this) {
                dbProd = dbProdNew;
            	dbProd__resolvedKey = __key;
            }
        }
        return dbProd;
    }

    public void setDbProd(PxProductInfo dbProd) {
        synchronized (this) {
            this.dbProd = dbProd;
            prodId = dbProd == null ? null : dbProd.getId();
            dbProd__resolvedKey = prodId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxFormatInfo getDbFormat() {
        Long __key = this.formatId;
        if (dbFormat__resolvedKey == null || !dbFormat__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxFormatInfoDao targetDao = daoSession.getPxFormatInfoDao();
            PxFormatInfo dbFormatNew = targetDao.load(__key);
            synchronized (this) {
                dbFormat = dbFormatNew;
            	dbFormat__resolvedKey = __key;
            }
        }
        return dbFormat;
    }

    public void setDbFormat(PxFormatInfo dbFormat) {
        synchronized (this) {
            this.dbFormat = dbFormat;
            formatId = dbFormat == null ? null : dbFormat.getId();
            dbFormat__resolvedKey = formatId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxMethodInfo getDbMethod() {
        Long __key = this.methodId;
        if (dbMethod__resolvedKey == null || !dbMethod__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxMethodInfoDao targetDao = daoSession.getPxMethodInfoDao();
            PxMethodInfo dbMethodNew = targetDao.load(__key);
            synchronized (this) {
                dbMethod = dbMethodNew;
            	dbMethod__resolvedKey = __key;
            }
        }
        return dbMethod;
    }

    public void setDbMethod(PxMethodInfo dbMethod) {
        synchronized (this) {
            this.dbMethod = dbMethod;
            methodId = dbMethod == null ? null : dbMethod.getId();
            dbMethod__resolvedKey = methodId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

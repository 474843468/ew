package com.think.firewaiter.module;

import com.think.firewaiter.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.think.firewaiter.dao.PxTableInfoDao;
import com.think.firewaiter.dao.UserDao;
import com.think.firewaiter.dao.UserTableRelDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END
/**
 * Entity mapped to table "UserTableRel".
 */
public class UserTableRel implements java.io.Serializable {

    private Long id;
    private Long userId;
    private Long tableId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserTableRelDao myDao;

    private User dbUser;
    private Long dbUser__resolvedKey;

    private PxTableInfo dbTable;
    private Long dbTable__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public UserTableRel() {
    }

    public UserTableRel(Long id) {
        this.id = id;
    }

    public UserTableRel(Long id, Long userId, Long tableId) {
        this.id = id;
        this.userId = userId;
        this.tableId = tableId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserTableRelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getTableId() {
        return tableId;
    }

    public void setTableId(Long tableId) {
        this.tableId = tableId;
    }

    /** To-one relationship, resolved on first access. */
    public User getDbUser() {
        Long __key = this.userId;
        if (dbUser__resolvedKey == null || !dbUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbUserNew = targetDao.load(__key);
            synchronized (this) {
                dbUser = dbUserNew;
            	dbUser__resolvedKey = __key;
            }
        }
        return dbUser;
    }

    public void setDbUser(User dbUser) {
        synchronized (this) {
            this.dbUser = dbUser;
            userId = dbUser == null ? null : dbUser.getId();
            dbUser__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxTableInfo getDbTable() {
        Long __key = this.tableId;
        if (dbTable__resolvedKey == null || !dbTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxTableInfoDao targetDao = daoSession.getPxTableInfoDao();
            PxTableInfo dbTableNew = targetDao.load(__key);
            synchronized (this) {
                dbTable = dbTableNew;
            	dbTable__resolvedKey = __key;
            }
        }
        return dbTable;
    }

    public void setDbTable(PxTableInfo dbTable) {
        synchronized (this) {
            this.dbTable = dbTable;
            tableId = dbTable == null ? null : dbTable.getId();
            dbTable__resolvedKey = tableId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
